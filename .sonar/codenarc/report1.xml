<?xml version='1.0'?>
<CodeNarc url='http://www.codenarc.org' version='0.20'><Report timestamp='30 nov. 2014 13:17:02'/><Project title='Sonar'><SourceDirectory>E:\Didier\work\hs\hs_v160\.\src</SourceDirectory></Project><PackageSummary totalFiles='105' filesWithViolations='26' priority1='0' priority2='120' priority3='0'></PackageSummary><Package path='' totalFiles='105' filesWithViolations='26' priority1='0' priority2='120' priority3='0'></Package><Package path='autoplay' totalFiles='2' filesWithViolations='0' priority1='0' priority2='0' priority3='0'></Package><Package path='cards' totalFiles='11' filesWithViolations='4' priority1='0' priority2='7' priority3='0'><File name='TestedHunter.groovy'><Violation ruleName='Println' priority='2' lineNumber='253'><SourceLine><![CDATA[println "   - Leokk attack_increase=$attack_increase"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='420'><SourceLine><![CDATA[println "   - Timberwolf attack_increase=$attack_increase"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation></File><File name='TestedMage.groovy'><Violation ruleName='Println' priority='2' lineNumber='240'><SourceLine><![CDATA[println "   - fatal damage is prevented, $this health back to ${the_hero.health}"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation></File><File name='TestedNeutral.groovy'><Violation ruleName='Println' priority='2' lineNumber='360'><SourceLine><![CDATA[println "   - $this_minion added $pirate_card to ${you}'s hand"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='1397'><SourceLine><![CDATA[println "   - $warleader gives attack_increase=+$attack_increase"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='1406'><SourceLine><![CDATA[println "   - $warleader gives health_increase=+$health_increase"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation></File><File name='TestedPriest.groovy'><Violation ruleName='Println' priority='2' lineNumber='334'><SourceLine><![CDATA[println "   - ${your_hero}'s power becomes ${your_hero.power.name}"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation></File></Package><Package path='decks' totalFiles='6' filesWithViolations='6' priority1='0' priority2='6' priority3='0'><File name='AnduinDecks.groovy'><Violation ruleName='ClassNameSameAsFilename' priority='2' lineNumber='5'><SourceLine><![CDATA[class AnduinDeck1 extends Deck {]]></SourceLine><Message><![CDATA[Class `AnduinDeck1` is the only class in `AnduinDecks.groovy`. In such a case the file and the class should have the same name.]]></Message></Violation></File><File name='GarroshDecks.groovy'><Violation ruleName='ClassNameSameAsFilename' priority='2' lineNumber='5'><SourceLine><![CDATA[class GarroshDeck1 extends Deck {]]></SourceLine><Message><![CDATA[Class `GarroshDeck1` is the only class in `GarroshDecks.groovy`. In such a case the file and the class should have the same name.]]></Message></Violation></File><File name='JainaDecks.groovy'><Violation ruleName='ClassNameSameAsFilename' priority='2' lineNumber='5'><SourceLine><![CDATA[class JainaDeck1 extends Deck {]]></SourceLine><Message><![CDATA[Class `JainaDeck1` is the only class in `JainaDecks.groovy`. In such a case the file and the class should have the same name.]]></Message></Violation></File><File name='MalfurionDecks.groovy'><Violation ruleName='ClassNameSameAsFilename' priority='2' lineNumber='5'><SourceLine><![CDATA[class MalfurionDeck1 extends Deck {]]></SourceLine><Message><![CDATA[Class `MalfurionDeck1` is the only class in `MalfurionDecks.groovy`. In such a case the file and the class should have the same name.]]></Message></Violation></File><File name='UtherDecks.groovy'><Violation ruleName='ClassNameSameAsFilename' priority='2' lineNumber='5'><SourceLine><![CDATA[class UtherDeck1 extends Deck {]]></SourceLine><Message><![CDATA[Class `UtherDeck1` is the only class in `UtherDecks.groovy`. In such a case the file and the class should have the same name.]]></Message></Violation></File><File name='ValeeraDecks.groovy'><Violation ruleName='ClassNameSameAsFilename' priority='2' lineNumber='5'><SourceLine><![CDATA[class ValeeraDeck1 extends Deck {]]></SourceLine><Message><![CDATA[Class `ValeeraDeck1` is the only class in `ValeeraDecks.groovy`. In such a case the file and the class should have the same name.]]></Message></Violation></File></Package><Package path='game' totalFiles='19' filesWithViolations='10' priority1='0' priority2='96' priority3='0'><File name='Card.groovy'><Violation ruleName='Println' priority='2' lineNumber='56'><SourceLine><![CDATA[println "      . $this text = ${ps.text}"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='127'><SourceLine><![CDATA[println e]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='236'><SourceLine><![CDATA[println "      . transforming $c into a '$new_card_name'"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation></File><File name='CardLibrary.groovy'><Violation ruleName='Println' priority='2' lineNumber='67'><SourceLine><![CDATA[println e]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='74'><SourceLine><![CDATA[println e]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation></File><File name='Game.groovy'><Violation ruleName='Println' priority='2' lineNumber='92'><SourceLine><![CDATA[println ""]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='103'><SourceLine><![CDATA[println '!'*win_message.size()]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='104'><SourceLine><![CDATA[println win_message]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='105'><SourceLine><![CDATA[println '!'*win_message.size()]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='110'><SourceLine><![CDATA[println "---- end of game"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='114'><SourceLine><![CDATA[println "\n - $active_player ends its turn"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='119'><SourceLine><![CDATA[println "   - executing '${BuffType.DIE_AT_THE_END_OF_TURN}' for $it"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='150'><SourceLine><![CDATA[println "\n---- ${active_player}'s turn begins"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='159'><SourceLine><![CDATA[println "      . corruption kills $it"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='166'><SourceLine><![CDATA[println "   - destroying all minions"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='188'><SourceLine><![CDATA[println "   - fight begins between $attacker and $attacked"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='189'><SourceLine><![CDATA[println "      . $attacker is ${attacker.get_attack()}/${attacker.get_health()}"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='190'><SourceLine><![CDATA[println "      . $attacked is ${attacked.get_attack()}/${attacked.get_health()}"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='199'><SourceLine><![CDATA[println "      . $attacker is no longer on the battlefield -> attack cancelled "]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='203'><SourceLine><![CDATA[println "     . $attacked is replaced by $e.changed_attacked"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='219'><SourceLine><![CDATA[println "      . $attacked loses its divine shield and takes no damage"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='227'><SourceLine><![CDATA[println "      . $attacked receives no damage because it is immune"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='237'><SourceLine><![CDATA[println "      . $attacker loses its divine shield and takes no damage"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='245'><SourceLine><![CDATA[println "      . $attacker receives no damage because it is immune"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='271'><SourceLine><![CDATA[println "      . checking 'take damage' events for $attacked"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='283'><SourceLine><![CDATA[println "      . checking 'take damage' events for $attacker"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='311'><SourceLine><![CDATA[println "\n- ${Game.current.active_player} orders $attacker to attack $attacked"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='346'><SourceLine><![CDATA[println "      . $c is destroyed because there is no place in battlefield"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='349'><SourceLine><![CDATA[println "      . $c is put in play for $p at x=$place"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='425'><SourceLine><![CDATA[println """\]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation></File><File name='GameObject.groovy'><Violation ruleName='Println' priority='2' lineNumber='23'><SourceLine><![CDATA[println "      . executing $t for ${this} because $e"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='26'><SourceLine><![CDATA[println "      . removing $t because it was called for the last time"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation></File><File name='Hand.groovy'><Violation ruleName='Println' priority='2' lineNumber='18'><SourceLine><![CDATA[println "      . too much cards in hand, $c is discarded"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='22'><SourceLine><![CDATA[println "      . adding $c to ${hand_owner}'s hand"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='33'><SourceLine><![CDATA[println "   - discarding at random $c from ${hand_owner}'s hand"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='41'><SourceLine><![CDATA[println "      . $c is removed from ${hand_owner}'s hand"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation></File><File name='Hero.groovy'><Violation ruleName='Println' priority='2' lineNumber='36'><SourceLine><![CDATA[println "   - $this armor = $armor"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='71'><SourceLine><![CDATA[println "      . $this equips $w (${w.get_attack()}/${w.get_durability()})"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation></File><File name='Player.groovy'><Violation ruleName='Println' priority='2' lineNumber='95'><SourceLine><![CDATA[println "      . available mana for $this = $available_mana"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='102'><SourceLine><![CDATA[println "      . max mana for $this = $max_mana"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='107'><SourceLine><![CDATA[println "      . $this's overload = ${overload}"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='119'><SourceLine><![CDATA[println "      . $this chooses '$choice'"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='128'><SourceLine><![CDATA[println "      . adding $c to ${this}'s secrets"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='139'><SourceLine><![CDATA[println "      . $it moved to x=$place"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='149'><SourceLine><![CDATA[println "      . secret '$c.name' is revealed"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='158'><SourceLine><![CDATA[println "      . $this draws $n_cards card" + (n_cards > 1 ? "s" : "")]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='166'><SourceLine><![CDATA[println "      . $this cannot draw !"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='168'><SourceLine><![CDATA[println "      . fatigue = $fatigue !"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='181'><SourceLine><![CDATA[println "      . ${c.controller} loses control of $c"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='195'><SourceLine><![CDATA[println "      . ${this} gains control of $c"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='199'><SourceLine><![CDATA[println "      . $it moved to x=$it.place"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='218'><SourceLine><![CDATA[println "      . spell damage modified by $buff"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='259'><SourceLine><![CDATA[println "\n- $this plays $c"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='295'><SourceLine><![CDATA[println "      . $c is not played"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='355'><SourceLine><![CDATA[println "      . list of choices is empty, no selection"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='369'><SourceLine><![CDATA[println "      . selected: ${next_choices.getAt(0)}"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='377'><SourceLine><![CDATA[println "      . selected: $result"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='391'><SourceLine><![CDATA[println "\n- $this uses ${hero}'s power: ${hero.power.name}"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation></File><File name='ScriptObject.groovy'><Violation ruleName='Println' priority='2' lineNumber='67'><SourceLine><![CDATA[println "      . cost change = $value"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='72'><SourceLine><![CDATA[println "      . lowest cost = $value"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='77'><SourceLine><![CDATA[println "      . chosen target = $t"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='118'><SourceLine><![CDATA[println "      . attack_increase = $value"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='123'><SourceLine><![CDATA[println "      . attack_change = $value"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='128'><SourceLine><![CDATA[println "      . cost_increase = $value"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='148'><SourceLine><![CDATA[println "      . health increase = $value"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='153'><SourceLine><![CDATA[println "      . spell damage increase = $value"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='158'><SourceLine><![CDATA[println "      . spell healing increase = $value"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='163'><SourceLine><![CDATA[println "      . power damage increase = $value"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='168'><SourceLine><![CDATA[println "      . power healing increase = $value"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='334'><SourceLine><![CDATA[println "      . setting stop_action = $value for event '${Game.current_event}'"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation></File><File name='Target.groovy'><Violation ruleName='Println' priority='2' lineNumber='53'><SourceLine><![CDATA[println "      . additional buffs added: ${e.additional_buffs}"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='230'><SourceLine><![CDATA[println "      . $this is not enraged anymore"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='235'><SourceLine><![CDATA[println "      . $this is enraged"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='245'><SourceLine><![CDATA[println "      . $t receives no damage since it is dead"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='259'><SourceLine><![CDATA[println "      . $this deals $amount damage to $t"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='268'><SourceLine><![CDATA[println "      . dealing $amount damage to $targets"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='284'><SourceLine><![CDATA[println "      . $this destroys $t"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='297'><SourceLine><![CDATA[println "      . $this dies..."]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='353'><SourceLine><![CDATA[println "      . setting attack for $this = $new_value"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='393'><SourceLine><![CDATA[println "      . setting max health for $this = $new_value"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='396'><SourceLine><![CDATA[println "      . setting health for $this = $max_health"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='470'><SourceLine><![CDATA[println "      . $this leaves play"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='502'><SourceLine><![CDATA[println "      . $this takes no damage because it is immune"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='523'><SourceLine><![CDATA[println "      . $this armor absorbed all damage($amount), new armor=$hero.armor"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='531'><SourceLine><![CDATA[println "      . $this armor absorbed some damage, armor is destroyed"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='536'><SourceLine><![CDATA[println "      . $this receives $amount combat damage, new health=${this.health}"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='567'><SourceLine><![CDATA[println "      . healing action stopped"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='572'><SourceLine><![CDATA[println "      . $target is restored $amount health by $this"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='586'><SourceLine><![CDATA[println "      . adding $amount health for $this"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='592'><SourceLine><![CDATA[println "      . damage reduced to $amount because $this has '$CANNOT_BE_REDUCED_BELOW_1_HEALTH'"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='607'><SourceLine><![CDATA[println "      . new health for $this = ${get_health()}"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='613'><SourceLine><![CDATA[println "      . new health for $this = ${get_health()}"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='621'><SourceLine><![CDATA[println "      . $this silences $c"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation></File><File name='Weapon.groovy'><Violation ruleName='Println' priority='2' lineNumber='28'><SourceLine><![CDATA[println "      . ${controller.hero}'s weapon attack is now ${get_attack()}"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='33'><SourceLine><![CDATA[println "      . ${controller.hero}'s weapon durability is now ${get_durability()}"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='46'><SourceLine><![CDATA[println "      . ${controller.hero}'s weapon destroyed"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation></File></Package><Package path='mechanics' totalFiles='57' filesWithViolations='3' priority1='0' priority2='4' priority3='0'></Package><Package path='mechanics/buffs' totalFiles='11' filesWithViolations='3' priority1='0' priority2='4' priority3='0'><File name='Buff.groovy'><Violation ruleName='Println' priority='2' lineNumber='26'><SourceLine><![CDATA[println "      . added '$this' buff to '$target'"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='34'><SourceLine><![CDATA[println "      . '$this' buff is removed from $target"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation></File><File name='ChangeAttackBuff.groovy'><Violation ruleName='Println' priority='2' lineNumber='20'><SourceLine><![CDATA[println "      . original attack is restored for $target"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation></File><File name='ChangeHealthBuff.groovy'><Violation ruleName='Println' priority='2' lineNumber='25'><SourceLine><![CDATA[println "      . original health is restored for $target"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation></File></Package><Package path='mechanics/events' totalFiles='45' filesWithViolations='0' priority1='0' priority2='0' priority3='0'></Package><Package path='state' totalFiles='7' filesWithViolations='1' priority1='0' priority2='1' priority3='0'><File name='State.groovy'><Violation ruleName='Println' priority='2' lineNumber='51'><SourceLine><![CDATA[println sn.dump()]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation></File></Package><Package path='utils' totalFiles='3' filesWithViolations='2' priority1='0' priority2='6' priority3='0'><File name='CardSetJSONReader.groovy'><Violation ruleName='Println' priority='2' lineNumber='76'><SourceLine><![CDATA[printf('  %-25s %s\n', it.name, it.description)]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='EmptyCatchBlock' priority='2' lineNumber='98'><SourceLine><![CDATA[catch(InvalidDefinitionException e) {]]></SourceLine><Message><![CDATA[The catch block is empty]]></Message></Violation></File><File name='Sandbox.groovy'><Violation ruleName='Println' priority='2' lineNumber='5'><SourceLine><![CDATA[println "aaa   aaa".replaceAll(/\s+/,' ')]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='16'><SourceLine><![CDATA[println it.name]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='17'><SourceLine><![CDATA[println "     "+it.description]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='22'><SourceLine><![CDATA[println "     $s"]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation></File></Package><Rules><Rule name='AssignmentInConditional'><Description><![CDATA[An assignment operator (=) was used in a conditional test. This is usually a typo, and the comparison operator (==) was intended.]]></Description></Rule><Rule name='CatchError'><Description><![CDATA[Catching Error is dangerous; it can catch exceptions such as ThreadDeath and OutOfMemoryError.]]></Description></Rule><Rule name='CatchException'><Description><![CDATA[Catching Exception is often too broad or general. It should usually be restricted to framework or infrastructure code, rather than application code.]]></Description></Rule><Rule name='CatchNullPointerException'><Description><![CDATA[Catching NullPointerException is never appropriate. It should be avoided in the first place with proper null checking, and it can mask underlying errors.]]></Description></Rule><Rule name='CatchRuntimeException'><Description><![CDATA[Catching RuntimeException is often too broad or general. It should usually be restricted to framework or infrastructure code, rather than application code.]]></Description></Rule><Rule name='ClassNameSameAsFilename'><Description><![CDATA[Reports files containing only one top level class / enum / interface which is named differently than the file.]]></Description></Rule><Rule name='CloneableWithoutClone'><Description><![CDATA[A class that implements java.lang.Cloneable should define a clone() method.]]></Description></Rule><Rule name='ConfusingTernary'><Description><![CDATA[In a ternary expression avoid negation in the test. For example, rephrase: "(x != y) ? diff : same" as: "(x == y) ? same : diff". Consistent use of this rule makes the code easier to read. Also, this resolves trivial ordering problems, such as "does the error case go first?" or "does the common case go first?".]]></Description></Rule><Rule name='DuplicateCaseStatement'><Description><![CDATA[Check for duplicate case statements in a switch block, such as two equal integers or strings.]]></Description></Rule><Rule name='DuplicateImport'><Description><![CDATA[Duplicate import statements are unnecessary.]]></Description></Rule><Rule name='ElseBlockBraces'><Description><![CDATA[Use braces for else blocks, even for a single statement. By default, braces are not required for an else if it is followed immediately by an if. Set the bracesRequiredForElseIf property to true to require braces is that situation as well.]]></Description></Rule><Rule name='EmptyCatchBlock'><Description><![CDATA[In most cases, exceptions should not be caught and ignored (swallowed).]]></Description></Rule><Rule name='EmptyClass'><Description><![CDATA[Reports classes without methods, fields or properties. Why would you need a class like this?]]></Description></Rule><Rule name='EmptyElseBlock'><Description><![CDATA[Empty else blocks are confusing and serve no purpose.]]></Description></Rule><Rule name='EmptyFinallyBlock'><Description><![CDATA[Empty finally blocks are confusing and serve no purpose.]]></Description></Rule><Rule name='EmptyForStatement'><Description><![CDATA[Empty for statements are confusing and serve no purpose.]]></Description></Rule><Rule name='EmptyIfStatement'><Description><![CDATA[Empty if statements are confusing and serve no purpose.]]></Description></Rule><Rule name='EmptyInstanceInitializer'><Description><![CDATA[An empty class instance initializer was found. It is safe to remove it.]]></Description></Rule><Rule name='EmptyMethod'><Description><![CDATA[A method was found without an implementation. If the method is overriding or implementing a parent method, then mark it with the @Override annotation.]]></Description></Rule><Rule name='EmptyStaticInitializer'><Description><![CDATA[An empty static initializer was found. It is safe to remove it.]]></Description></Rule><Rule name='EmptySwitchStatement'><Description><![CDATA[Empty switch statements are confusing and serve no purpose.]]></Description></Rule><Rule name='EmptySynchronizedStatement'><Description><![CDATA[Empty synchronized statements are confusing and serve no purpose.]]></Description></Rule><Rule name='EmptyTryBlock'><Description><![CDATA[Empty try blocks are confusing and serve no purpose.]]></Description></Rule><Rule name='EmptyWhileStatement'><Description><![CDATA[Empty while statements are confusing and serve no purpose.]]></Description></Rule><Rule name='EqualsAndHashCode'><Description><![CDATA[If either the equals(Object) or the hashCode() methods are overridden within a class, then both must be overridden.]]></Description></Rule><Rule name='EqualsOverloaded'><Description><![CDATA[The class has an equals method, but the parameter of the method is not of type Object. It is not overriding equals but instead overloading it.]]></Description></Rule><Rule name='GrailsServletContextReference'><Description><![CDATA[Checks for references to the servletContext object from within Grails controller and taglib classes.]]></Description></Rule><Rule name='GrailsStatelessService'><Description><![CDATA[Checks for fields on Grails service classes. Grails service classes are singletons, by default, and so they should be reentrant and typically stateless. The ignoreFieldNames property (dataSource,scope,sessionFactory, transactional,*Service) specifies one or more field names that should be ignored. The ignoreFieldTypes property (null) specifies one or more field type names that should be ignored. Both can optionally contain wildcard characters ('*' or '?').]]></Description></Rule><Rule name='HashtableIsObsolete'><Description><![CDATA[The java.util.Hashtable class is effectively obsolete. Use the Java Collections Framework classes instead, including HashMap or ConcurrentHashMap. See the JDK javadoc.]]></Description></Rule><Rule name='ImportFromSamePackage'><Description><![CDATA[An import of a class that is within the same package is unnecessary.]]></Description></Rule><Rule name='ImportFromSunPackages'><Description><![CDATA[Avoid importing anything from the 'sun.*' packages. These packages are not portable and are likely to change.]]></Description></Rule><Rule name='InvertedIfElse'><Description><![CDATA[An inverted if-else statement is one in which there is a single if statement with a single else branch and the boolean test of the if is negated. For instance "if (!x) false else true". It is usually clearer to write this as "if (x) true else false".]]></Description></Rule><Rule name='NestedBlockDepth'><Description><![CDATA[Checks for blocks or closures nested more than maxNestedBlockDepth (5) levels deep.]]></Description></Rule><Rule name='NestedSynchronization'><Description><![CDATA[Nested synchronized statements should be avoided. Nested synchronized statements are either useless (if the lock objects are identical) or prone to deadlock.]]></Description></Rule><Rule name='PrintStackTrace'><Description><![CDATA[Checks for calls to printStackTrace().]]></Description></Rule><Rule name='Println'><Description><![CDATA[Checks for calls to this.print(), this.println() or this.printf().]]></Description></Rule><Rule name='ReturnFromFinallyBlock'><Description><![CDATA[Returning from a finally block is confusing and can hide the original exception.]]></Description></Rule><Rule name='SynchronizedMethod'><Description><![CDATA[This rule reports uses of the synchronized keyword on methods. Synchronized methods are the same as synchronizing on 'this', which effectively make your synchronization policy public and modifiable by other objects. To avoid possibilities of deadlock, it is better to synchronize on internal objects.]]></Description></Rule><Rule name='SystemErrPrint'><Description><![CDATA[Checks for calls to System.err.print(), System.err.println() or System.err.printf().]]></Description></Rule><Rule name='SystemOutPrint'><Description><![CDATA[Checks for calls to System.out.print(), System.out.println() or System.out.printf().]]></Description></Rule><Rule name='SystemRunFinalizersOnExit'><Description><![CDATA[Method calls to System.runFinalizersOnExit() should not be allowed. This method is inherently non-thread-safe, may result in data corruption, deadlock, and may effect parts of the program far removed from it's call point. It is deprecated, and it's use strongly discouraged.]]></Description></Rule><Rule name='ThreadYield'><Description><![CDATA[Method calls to Thread.yield() should not be allowed. This method has no useful guaranteed semantics, and is often used by inexperienced programmers to mask race conditions.]]></Description></Rule><Rule name='ThrowError'><Description><![CDATA[Checks for throwing an instance of java.lang.Error.]]></Description></Rule><Rule name='ThrowException'><Description><![CDATA[Checks for throwing an instance of java.lang.Exception.]]></Description></Rule><Rule name='ThrowExceptionFromFinallyBlock'><Description><![CDATA[Throwing an exception from a finally block is confusing and can hide the original exception.]]></Description></Rule><Rule name='ThrowNullPointerException'><Description><![CDATA[Checks for throwing an instance of java.lang.NullPointerException.]]></Description></Rule><Rule name='ThrowRuntimeException'><Description><![CDATA[Checks for throwing an instance of java.lang.RuntimeException.]]></Description></Rule><Rule name='ThrowThrowable'><Description><![CDATA[Checks for throwing an instance of java.lang.Throwable.]]></Description></Rule><Rule name='UnnecessaryGroovyImport'><Description><![CDATA[A Groovy file does not need to include an import for classes from java.lang, java.util, java.io, java.net, groovy.lang and groovy.util, as well as the classes java.math.BigDecimal and java.math.BigInteger.]]></Description></Rule><Rule name='UnusedImport'><Description><![CDATA[Imports for a class that is never referenced within the source file is unnecessary.]]></Description></Rule><Rule name='UnusedMethodParameter'><Description><![CDATA[This rule finds instances of method parameters not being used. It does not analyze private methods (that is done by the UnusedPrivateMethodParameter rule) or methods marked @Override.]]></Description></Rule><Rule name='UnusedPrivateField'><Description><![CDATA[Checks for private fields that are not referenced within the same class.]]></Description></Rule><Rule name='UnusedPrivateMethod'><Description><![CDATA[Checks for private methods that are not referenced within the same class.]]></Description></Rule><Rule name='UnusedPrivateMethodParameter'><Description><![CDATA[Checks for parameters to private methods that are not referenced within the method body.]]></Description></Rule><Rule name='UnusedVariable'><Description><![CDATA[Checks for variables that are never referenced. The ignoreVariableNames property (null) specifies one or more variable names that should be ignored, optionally containing wildcard characters ('*' or '?').]]></Description></Rule><Rule name='VectorIsObsolete'><Description><![CDATA[The java.util.Vector class is effectively obsolete. Use the Java Collections Framework classes instead, including ArrayList or Collections.synchronizedList(). See the JDK javadoc.]]></Description></Rule><Rule name='VolatileLongOrDoubleField'><Description><![CDATA[Long or double fields should not be declared as volatile. Java specifies that reads and writes from such fields are atomic, but many JVM's have violated this specification. Unless you are certain of your JVM, it is better to synchronize access to such fields rather than declare them volatile. This rule flags fields marked volatile when their type is double or long or the name of their type is "Double" or "Long".]]></Description></Rule></Rules></CodeNarc>